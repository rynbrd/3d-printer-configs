## All gcode macros defined here.
# TODO: Improve up pause and cancel gcode.
# TODO: Invalidate cached QGL and bed mesh if temperature changes too much.
# TODO: Consolidate configs to single section.
# TODO: Clean up parking commands.

[gcode_macro PROBE_CONFIG]
variable_max_temp: 150
variable_safe_x: 160
variable_safe_y: 250
variable_safe_z: 10
variable_feedrate: 3000
gcode:

[gcode_macro PURGE_CONFIG]
variable_bucket_x: 20
variable_bucket_y: 256
variable_brush_x: 30
variable_brush_y: 256
variable_brush_z: 0.5
variable_brush_width: 40
variable_prime: 0
variable_retract: 0
gcode:

# Macros called at the begining of a print. Initializes kinematics, starts
# heaters and fans, and cleans the nozzle.
[gcode_macro PRINT_START]
gcode:
    {% set z_offset = 0 %}
    {% if params.Z_OFFSET is defined %}
        {% set z_offset = params.Z_OFFSET %}
    {% endif %}
    {% set probe_temp = printer["gcode_macro PROBE_CONFIG"].max_temp %}

    # start heaters
    M104 S{probe_temp}
    M140 S{params.BED}

    # turn on carbon filter
    FILTER_ON

    # turn on the lights
    LIGHTS_ON

    # clear previous kinematics
    G90
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    SET_PRESSURE_ADVANCE ADVANCE=0 SMOOTH_TIME=0.040
    RESET_VELOCITY_LIMITS

    # home, clean the nozzle, and QGL if necessary
    HOME_IF_NEEDED
    PURGE_SCRUB EXTRUDER={probe_temp}
    QGL_IF_NEEDED
    G28 Z

    # load or perform bed mesh
    {% if params.SKIP_MESH %}
        { action_respond_info("Skipping bed mesh.") }
    {% else %}
        {% if params.LOAD_MESH %}
            { action_respond_info("Loading bed mesh " + params.LOAD_MESH + ".") }
            BED_MESH_PROFILE LOAD={params.LOAD_MESH}
        {% else %}
            { action_respond_info("Performing bed mesh.") }
            {% if params.FORCE_MESH or params.PRINT_MIN or params.PRINT_MAX %}
                BED_MESH_CALIBRATE CACHE={params.CACHE_MESH} PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
            {% else %}
                BED_MESH_CALIBRATE CACHE={params.CACHE_MESH}
            {% endif %}
        {% endif %}
        BED_MESH_OUTPUT PGP=0
    {% endif %}

    # set Z offset
    SET_GCODE_OFFSET Z_ADJUST={z_offset} MOVE=1
    GET_POSITION

    # park and wait for heaters
    PURGE_PARK
    M109 S{params.EXTRUDER}
    M190 S{params.BED}

# Macros called at the end of a print. Parks the toolhead, turns off the
# heaters, and clears print specific kinematics.
[gcode_macro PRINT_END]
gcode:
    {% set retract = printer["gcode_macro PURGE_CONFIG"].retract %}

    # Get Boundaries
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}

    # Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20.0) %}
        {% set jog_x = 20.0 %}
    {% else %}
        {% set jog_x = -20.0 %}
    {% endif %}
    {% if printer.toolhead.position.y < (max_y - 20.0) %}
        {% set jog_y = 20.0 %}
    {% else %}
        {% set jog_y = -20.0 %}
    {% endif %}
    {% if printer.toolhead.position.z < (max_z - 2.0) %}
        {% set jog_z = 2.0 %}
    {% else %}
        {% set jog_z = max_z - printer.toolhead.position.z %}
    {% endif %}
    { action_respond_info("Moving nozzle (" + jog_z|string + ", " + jog_y|string + ", " + jog_z|string + ").") }

    # Find a safe Z to park at.
    {% set park_x = printer["gcode_macro PROBE_CONFIG"].safe_x %}
    {% set park_y = printer["gcode_macro PROBE_CONFIG"].safe_y %}
    {% if printer.toolhead.position.z < (max_z - 20.0) %}
        {% set park_z = printer.toolhead.position.z | float + 20.0 %}
    {% else %}
        {% set park_z = printer.toolhead.position.z %}
    {% endif %}

    G91                             # relative positioning
    G0 X{jog_x} Y{jog_y} Z{jog_z} F20000    # move nozzle to remove stringing
    G90                             # absolute positioning
    PURGE_PARK Z={park_z}           # park the nozzle out of the way
    G92 E0                          # zero the extruder
    G1 E-{retract} F3600            # retract filament
    M400                            # wait for buffer to clear
    M107                            # ensure part cooling fan is off
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    SET_PRESSURE_ADVANCE ADVANCE=0 SMOOTH_TIME=0.040
    TURN_OFF_HEATERS    
    FILTER_OFF DELAY=900

# Called to pause a print.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
variable_x: 160
variable_y: 256
variable_z: 20
variable_e: 2
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z}
    G90
    G1 X{x} Y{y} F6000

# Called to resume a paused print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_e: 3      #edit to your retract length
gcode:
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

# Called to cancel a print.
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    FILTER_OFF DELAY=900
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

# Called when turning off the printer. Turns off heaters, clears kinematics,
# and parks the toolhead to limit gantry sag.
[gcode_macro SHUTDOWN]
variable_park_x: 125
variable_park_y: 0
gcode:
    # Move Z up a safe distance so the nozzle doesn't sag into the bed or print.
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% if printer.toolhead.position.z < (max_z - 20.0) %}
        {% set park_z = printer.toolhead.position.z | float + 20.0 %}
    {% else %}
        {% set park_z = printer.toolhead.position.z %}
    {% endif %}

    TURN_OFF_HEATERS
    FILTER_OFF
    {% if printer.toolhead.homed_axes == 'xyz' %}
    G0 X{park_x} Y{park_y} Z{park_z} F9000
    {% endif %}
    BED_MESH_RESET
    M84
    LIGHTS_OUT

[gcode_macro HOME_IF_NEEDED]
gcode:
    {% if printer.toolhead.homed_axes != 'xyz' %}
        G28
    {% endif %}

[gcode_macro QGL_IF_NEEDED]
gcode:
    {% if not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL
    {% endif %}

[gcode_macro G32]
gcode:
    SET_GCODE_OFFSET Z=0
    BED_MESH_CLEAR
    HOME_IF_NEEDED
    QUAD_GANTRY_LEVEL
    G28 Z

[gcode_macro RESET_VELOCITY_LIMITS]
variable_max_velocity: 300
variable_max_accel: 7000
variable_max_accel_to_decel: 7000
variable_square_corner_velocity: 5
gcode:
    SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel} ACCEL_TO_DECEL={max_accel_to_decel} SQUARE_CORNER_VELOCITY={square_corner_velocity}

# Called before probing.
[gcode_macro PROBE_ACTIVATE]
variable_park_x: 125
variable_park_y: 0
gcode:
    {% set probe_temp = printer["gcode_macro PROBE_CONFIG"].max_temp %}
    {% set max_temp = probe_temp + 5 %}
    {% set actual_temp = printer.extruder.temperature %}
    {% set target_temp = printer.extruder.target %}

    {% if target_temp > probe_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, probe_temp)) }
        M109 S{probe_temp}
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if actual_temp > max_temp %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ max_temp }
        {% endif %}
    {% endif %}

[gcode_macro PREHEAT]
variable_extruder: 150
variable_bed: 110
gcode:
    FILTER_ON SPEED=0.5
    M104 S{extruder}
    M140 S{bed}
    LIGHTS_ON
    HOME_IF_NEEDED
    G90
    G0 X125 Y125 Z10 F9000

[gcode_macro MAINTENANCE]
gcode:
    M104 S245
    HOME_IF_NEEDED
    G0 X125 Y0 Z100 F8000

[gcode_macro PURGE_PARK]
gcode:
    {% set bucket_x = printer["gcode_macro PURGE_CONFIG"].bucket_x %}
    {% set bucket_y = printer["gcode_macro PURGE_CONFIG"].bucket_y %}

    HOME_IF_NEEDED
    G90
    {% if params.Z is defined %}
        G0 X{bucket_x} Y{bucket_y} Z{params.Z} F9000
    {% else %}
        G0 X{bucket_x} Y{bucket_y} F9000
    {% endif %}

[gcode_macro PURGE_SCRUB]
# scrub the nozzle and home to ensure accurate Z height
gcode:
    {% set brush_x = printer["gcode_macro PURGE_CONFIG"].brush_x %}
    {% set brush_y = printer["gcode_macro PURGE_CONFIG"].brush_y %}
    {% set brush_z = printer["gcode_macro PURGE_CONFIG"].brush_z %}
    {% set brush_width = printer["gcode_macro PURGE_CONFIG"].brush_width %}
    {% set brush_opposite_x = brush_x + brush_width %}
    {% set safe_y = printer["gcode_macro PROBE_CONFIG"].safe_y %}
    {% set feedrate = 6000 %}
    {% set prime = printer["gcode_macro PURGE_CONFIG"].prime %}
    {% set retract = printer["gcode_macro PURGE_CONFIG"].retract %}

    {% if params.EXTRUDER is defined %}
        {% set extruder_temp = params.EXTRUDER %}
    {% else %}
        {% set extruder_temp = 150 %}
    {% endif %}
    
    M104 S{extruder_temp}   # set purge temp
    G90                     # absolute positioning

    PURGE_PARK Z=5
    M109 S{extruder_temp}               # wait for clean temp
    G92 E0                              # reset extruder
    {% if prime > 0 %}
        G1 E{prime} F1000               # do a short purge to prime nozzle
    {% endif %}
    G0 X{brush_x} Y{safe_y} Z{brush_z} F{feedrate}  # prepare to scrub
    G0 Y{brush_y} Z{brush_z}            # prepare to scrub
    G0 X{brush_opposite_x}              # scrub back ...
    G0 X{brush_x}
    G0 X{brush_opposite_x}
    G0 X{brush_x}
    G0 X{brush_opposite_x}
    G0 X{brush_x}                       # ... and forth
    G0 Z10                              # pick the nozzle back up
    {% if retract > 0 %}
        G1 E-{retract} F3600            # retract to avoid oozing
    {% endif %}

[gcode_macro FILTER_ON]
gcode:
    UPDATE_DELAYED_GCODE ID=FILTER_OFF_DELAYED DURATION=0
    {% if params.SPEED %}
        SET_FAN_SPEED FAN=filter SPEED={params.SPEED}
    {% else %}
        SET_FAN_SPEED FAN=filter SPEED=1.0
    {% endif %}

[gcode_macro FILTER_OFF]
gcode:
    {% if params.DELAY %}
        UPDATE_DELAYED_GCODE ID=FILTER_OFF_DELAYED DURATION={params.DELAY}
    {% else %}
        UPDATE_DELAYED_GCODE ID=FILTER_OFF_DELAYED DURATION=0
        SET_FAN_SPEED FAN=filter SPEED=0
    {% endif %}

[delayed_gcode FILTER_OFF_DELAYED]
gcode:
    FILTER_OFF

[gcode_macro LIGHTS]
variable_value: 0
variable_step: 0.05
variable_time: 800
gcode:
    {% set lights_value = params.VALUE|default(1)|float %}
    SET_PIN PIN=lights VALUE={ lights_value }
    SET_GCODE_VARIABLE MACRO=LIGHTS VARIABLE=value VALUE={ lights_value }

[gcode_macro LIGHTS_FADE]
gcode:
    {% set desired_value = '%0.3f'|format(params.VALUE|float)|float %}
    {% set current_value = '%0.3f'|format(printer["gcode_macro LIGHTS"].value|float)|float %}

    {% set step = printer["gcode_macro LIGHTS"].step|float %}
    {% set dwell = printer["gcode_macro LIGHTS"].time|float * step %}
    {% set step_count = (1.0 / step)|int %}

    {% set multi = 1 %}
    {% if current_value > desired_value %}
        {% set multi = -1 %}
    {% endif %}

    {% for n in range(step_count) %}
        {% if n*step <= (desired_value-current_value)|abs %}
            SET_PIN PIN=lights VALUE={ '%0.2f'|format(current_value+n*step*multi) }
            G4 P{ dwell }
        {% endif %}
    {% endfor %}
    SET_PIN PIN=lights VALUE={ desired_value }
    SET_GCODE_VARIABLE MACRO=LIGHTS VARIABLE=value VALUE={ desired_value }

[gcode_macro LIGHTS_ON]
gcode:
    LIGHTS_FADE VALUE=1

[gcode_macro LIGHTS_OUT]
gcode:
    LIGHTS_FADE VALUE=0

[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 
