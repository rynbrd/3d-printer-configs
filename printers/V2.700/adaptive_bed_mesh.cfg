
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BASE_BED_MESH_CALIBRATE
variable_last_min_x: -1
variable_last_min_y: -1
variable_last_max_x: -1
variable_last_max_y: -1
variable_last_chamber_temp: 0
gcode:

    { action_respond_info("Last chamber temp: %s" % (last_chamber_temp)) }
    {% set use_last = false %}
    {% set adaptive = false %}
    {% set bed_mesh = printer["configfile"].config["bed_mesh"] %}
    {% set current_chamber_temp = printer["temperature_sensor chamber"].temperature %}
    {% set temp_delta = printer["gcode_macro CONFIG"].chamber_temp_delta %}
    { action_respond_info("Current chamber temp: %s" % (current_chamber_temp)) }
    {% if bed_mesh %}
        {% set mesh_min_x = bed_mesh.mesh_min.split(",")[0]|float %}
        {% set mesh_min_y = bed_mesh.mesh_min.split(",")[1]|float %}
        {% set mesh_max_x = bed_mesh.mesh_max.split(",")[0]|float %}
        {% set mesh_max_y = bed_mesh.mesh_max.split(",")[1]|float %}
    {% endif %}
    {% if bed_mesh and params.PRINT_MIN and params.PRINT_MAX %}
        {% set print_min_x = params.PRINT_MIN.split(",")[0]|float|round(0, 'ceil')|int %}
        {% set print_min_y = params.PRINT_MIN.split(",")[1]|float|round(0, 'ceil')|int %}
        {% set print_max_x = params.PRINT_MAX.split(",")[0]|float|round(0, 'ceil')|int %}
        {% set print_max_y = params.PRINT_MAX.split(",")[1]|float|round(0, 'ceil')|int %}

        {% if print_min_x >= print_max_x or print_min_y >= print_max_y %}
            { action_respond_info("Adaptive bed mesh area is too large, using configured min/max.") }
            {% set print_min_x = mesh_min_x %}
            {% set print_min_y = mesh_min_y %}
            {% set print_max_x = mesh_max_x %}
            {% set print_max_y = mesh_max_y %}
        {% else %}
            {% set print_min_x = [print_min_x, mesh_min_x]|max %}
            {% set print_min_y = [print_min_y, mesh_min_y]|max %}
            {% set print_max_x = [print_max_x, mesh_max_x]|min %}
            {% set print_max_y = [print_max_y, mesh_max_y]|min %}

            {% set scale_x = ((print_max_x - print_min_x) / (mesh_max_x - mesh_min_x))|float %}
            {% set scale_y = ((print_max_y - print_min_y) / (mesh_max_y - mesh_min_y))|float %}

            {% set probe_count = bed_mesh.probe_count.split(",") %}
            {% set probe_count_x = probe_count[0]|int %}
            {% set probe_count_y = probe_count[1]|int %}

            {% set min_probe_count = 3 %}
            {% if probe_count_x >= 4 and probe_count_y >= 4 and bed_mesh.algorithm == "bicubic" %}
                {% set min_probe_count = 4 %}
            {% endif %}

            {% set scale_count_x = (probe_count_x|float * scale_x)|round(0, 'ceil')|int %}
            {% set scale_count_y = (probe_count_y|float * scale_y)|round(0, 'ceil')|int %}

            {% set probe_count_x = [scale_count_x, min_probe_count]|max %}
            {% set probe_count_y = [scale_count_y, min_probe_count]|max %}

            {% set adaptive = true %}
        {% endif %}

        {% if params.CACHE %}
            {% if print_min_x < last_min_x or print_min_y < last_min_y or print_max_x > last_max_x or print_max_y > last_max_y %}
                { action_respond_info("Bed mesh area changed, invalidating cached bed mesh.") }
            {% elif (current_chamber_temp - last_chamber_temp)|abs > temp_delta %}
                { action_respond_info("Chamber temperature changed (%s => %s), invalidating cached bed mesh." % (last_chamber_temp, current_chamber_temp)) }
            {% else %}
                {% set use_last = true %}
            {% endif %}
        {% endif %}
    {% endif %}

    SET_GCODE_OFFSET Z=0 MOVE=1
    HOME_IF_NEEDED
    {% if use_last %}
        { action_respond_info("Preserving existing bed mesh: (%s,%s), (%s,%s)" % (last_min_x, last_min_y, last_max_x, last_max_y)) }
        BED_MESH_PROFILE LOAD=default
    {% elif adaptive %}
        { action_respond_info("Calibrating bed mesh\nadaptive bed mesh: enabled\nmesh area: (%s,%s), (%s,%s)\nprobe count: %s,%s" % (print_min_x, print_min_y, print_max_x, print_max_y, probe_count_x, probe_count_y)) }
        {% if bed_mesh.relative_reference_index %}
            BASE_BED_MESH_CALIBRATE MESH_MIN={print_min_x},{print_min_y} MESH_MAX={print_max_x},{print_max_y} PROBE_COUNT={probe_count_x},{probe_count_y} RELATIVE_REFERENCE_INDEX={bed_mesh.relative_reference_index}
        {% else %}
            BASE_BED_MESH_CALIBRATE MESH_MIN={print_min_x},{print_min_y} MESH_MAX={print_max_x},{print_max_y} PROBE_COUNT={probe_count_x},{probe_count_y}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_min_x VALUE={print_min_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_min_y VALUE={print_min_y}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_max_x VALUE={print_max_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_max_y VALUE={print_max_y}
        BED_MESH_PROFILE LOAD=default
    {% elif bed_mesh %}
        { action_respond_info("Calibrating bed mesh\nadaptive bed mesh: disabled") }
        BASE_BED_MESH_CALIBRATE
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_min_x VALUE={mesh_min_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_min_y VALUE={mesh_min_y}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_max_x VALUE={mesh_max_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_max_y VALUE={mesh_max_y}
        BED_MESH_PROFILE LOAD=default
    {% else %}
        { action_respond_info("Bed mesh not configured") } 
    {% endif %}
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_chamber_temp VALUE={current_chamber_temp}

[gcode_macro BED_MESH_RESET]
gcode:
    BED_MESH_CLEAR
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_min_x VALUE=-1
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_min_y VALUE=-1
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_max_x VALUE=-1
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_max_y VALUE=-1
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_chamber_temp VALUE=0
